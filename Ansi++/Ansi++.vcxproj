<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <ItemGroup Label="ProjectConfigurations">
    <ProjectConfiguration Include="Debug|Win32">
      <Configuration>Debug</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|Win32">
      <Configuration>Release</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Debug|x64">
      <Configuration>Debug</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|x64">
      <Configuration>Release</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
  </ItemGroup>
  <PropertyGroup Label="Globals">
    <VCProjectVersion>15.0</VCProjectVersion>
    <ProjectGuid>{627219AA-C8E1-4C24-9928-CE249910BFE5}</ProjectGuid>
    <RootNamespace>Ansi</RootNamespace>
    <WindowsTargetPlatformVersion>10.0.17134.0</WindowsTargetPlatformVersion>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'" Label="Configuration">
    <ConfigurationType>DynamicLibrary</ConfigurationType>
    <UseDebugLibraries>true</UseDebugLibraries>
    <PlatformToolset>v141</PlatformToolset>
    <CharacterSet>NotSet</CharacterSet>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'" Label="Configuration">
    <ConfigurationType>DynamicLibrary</ConfigurationType>
    <UseDebugLibraries>false</UseDebugLibraries>
    <PlatformToolset>v141</PlatformToolset>
    <WholeProgramOptimization>true</WholeProgramOptimization>
    <CharacterSet>NotSet</CharacterSet>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" Label="Configuration">
    <ConfigurationType>DynamicLibrary</ConfigurationType>
    <UseDebugLibraries>true</UseDebugLibraries>
    <PlatformToolset>v141</PlatformToolset>
    <CharacterSet>NotSet</CharacterSet>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
    <ConfigurationType>DynamicLibrary</ConfigurationType>
    <UseDebugLibraries>false</UseDebugLibraries>
    <PlatformToolset>v141</PlatformToolset>
    <WholeProgramOptimization>true</WholeProgramOptimization>
    <CharacterSet>NotSet</CharacterSet>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
  <ImportGroup Label="ExtensionSettings">
  </ImportGroup>
  <ImportGroup Label="Shared">
  </ImportGroup>
  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <PropertyGroup Label="UserMacros" />
  <PropertyGroup />
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
    <ClCompile>
      <WarningLevel>Level1</WarningLevel>
      <Optimization>Disabled</Optimization>
      <SDLCheck>false</SDLCheck>
      <ConformanceMode>true</ConformanceMode>
      <AdditionalIncludeDirectories>$(SolutionDir)</AdditionalIncludeDirectories>
      <PreprocessorDefinitions>AnsiApi_EXPORT;_WINDLL;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <LanguageStandard>stdcpp17</LanguageStandard>
    </ClCompile>
    <PostBuildEvent>
      <Command>echo Libraries:
if NOT EXIST A:\Libraries\NUL ( mkdir A:\Libraries )
copy /Y "$(outdir)$(Targetname).lib" A:\Libraries
echo "dll subdirectory:"
if NOT EXIST A:\Dll\NUL ( mkdir A:\Dll )

echo "$(outdir)$(Targetname).dll A:\Dll:"
copy /Y "$(outdir)$(Targetname).dll" A:\Dll
echo "includes subdir specific to $(projectname):"
if NOT EXIST A:\include\$(TargetName)\NUL ( mkdir "A:\include\$(TargetName)" )
copy /Y "$(ProjectDir)"*.h "A:\include\$(TargetName)"


REM (example:) set SubDirs=(text lexer interpreter interpreter\lang interpreter\rt journal)

REM for %%D in %SubDirs% do (
REM   echo " Processing directory:$(projectdir)%%D:"
REM   if EXIST "$(ProjectDir)%%D" (
REM         echo %%D
REM        if NOT EXIST A:\include\$(TargetName)\%%D\NUL ( 
REM              echo " Create sub dir A:\include\$(TargetName)\%%D" 
REM              mkdir "A:\include\$(TargetName)\%%D" 
REM        )
REM       echo "copy /Y $(ProjectDir)%%D\*.h A:\include\$(TargetName)\%%D"
REM       copy /Y "$(ProjectDir)%%D\"*.h "A:\include\$(TargetName)\%%D"
REM )
REM )</Command>
    </PostBuildEvent>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
    <ClCompile>
      <WarningLevel>Level1</WarningLevel>
      <Optimization>Disabled</Optimization>
      <SDLCheck>false</SDLCheck>
      <ConformanceMode>true</ConformanceMode>
      <AdditionalIncludeDirectories>$(SolutionDir)</AdditionalIncludeDirectories>
      <PreprocessorDefinitions>AnsiApi_EXPORT;_WINDLL;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <LanguageStandard>stdcpp17</LanguageStandard>
    </ClCompile>
    <PostBuildEvent>
      <Command>echo Libraries:
if NOT EXIST A:\Libraries\NUL ( mkdir A:\Libraries )
copy /Y "$(outdir)$(Targetname).lib" A:\Libraries
echo "dll subdirectory:"
if NOT EXIST A:\Dll\NUL ( mkdir A:\Dll )

echo "$(outdir)$(Targetname).dll A:\Dll:"
copy /Y "$(outdir)$(Targetname).dll" A:\Dll
echo "includes subdir specific to $(projectname):"
if NOT EXIST A:\include\$(TargetName)\NUL ( mkdir "A:\include\$(TargetName)" )
copy /Y "$(ProjectDir)"*.h "A:\include\$(TargetName)"


REM (example:) set SubDirs=(text lexer interpreter interpreter\lang interpreter\rt journal)

REM for %%D in %SubDirs% do (
REM   echo " Processing directory:$(projectdir)%%D:"
REM   if EXIST "$(ProjectDir)%%D" (
REM         echo %%D
REM        if NOT EXIST A:\include\$(TargetName)\%%D\NUL ( 
REM              echo " Create sub dir A:\include\$(TargetName)\%%D" 
REM              mkdir "A:\include\$(TargetName)\%%D" 
REM        )
REM       echo "copy /Y $(ProjectDir)%%D\*.h A:\include\$(TargetName)\%%D"
REM       copy /Y "$(ProjectDir)%%D\"*.h "A:\include\$(TargetName)\%%D"
REM )
REM )</Command>
    </PostBuildEvent>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
    <ClCompile>
      <WarningLevel>Level1</WarningLevel>
      <Optimization>MaxSpeed</Optimization>
      <FunctionLevelLinking>true</FunctionLevelLinking>
      <IntrinsicFunctions>true</IntrinsicFunctions>
      <SDLCheck>false</SDLCheck>
      <ConformanceMode>true</ConformanceMode>
      <AdditionalIncludeDirectories>$(SolutionDir)</AdditionalIncludeDirectories>
      <PreprocessorDefinitions>AnsiApi_EXPORT;_WINDLL;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <LanguageStandard>stdcpp17</LanguageStandard>
    </ClCompile>
    <Link>
      <EnableCOMDATFolding>true</EnableCOMDATFolding>
      <OptimizeReferences>true</OptimizeReferences>
    </Link>
    <PostBuildEvent>
      <Command>echo Libraries:
if NOT EXIST A:\Libraries\NUL ( mkdir A:\Libraries )
copy /Y "$(outdir)$(Targetname).lib" A:\Libraries
echo "dll subdirectory:"
if NOT EXIST A:\Dll\NUL ( mkdir A:\Dll )

echo "$(outdir)$(Targetname).dll A:\Dll:"
copy /Y "$(outdir)$(Targetname).dll" A:\Dll
echo "includes subdir specific to $(projectname):"
if NOT EXIST A:\include\$(TargetName)\NUL ( mkdir "A:\include\$(TargetName)" )
copy /Y "$(ProjectDir)"*.h "A:\include\$(TargetName)"


REM (example:) set SubDirs=(text lexer interpreter interpreter\lang interpreter\rt journal)

REM for %%D in %SubDirs% do (
REM   echo " Processing directory:$(projectdir)%%D:"
REM   if EXIST "$(ProjectDir)%%D" (
REM         echo %%D
REM        if NOT EXIST A:\include\$(TargetName)\%%D\NUL ( 
REM              echo " Create sub dir A:\include\$(TargetName)\%%D" 
REM              mkdir "A:\include\$(TargetName)\%%D" 
REM        )
REM       echo "copy /Y $(ProjectDir)%%D\*.h A:\include\$(TargetName)\%%D"
REM       copy /Y "$(ProjectDir)%%D\"*.h "A:\include\$(TargetName)\%%D"
REM )
REM )</Command>
    </PostBuildEvent>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
    <ClCompile>
      <WarningLevel>Level1</WarningLevel>
      <Optimization>MaxSpeed</Optimization>
      <FunctionLevelLinking>true</FunctionLevelLinking>
      <IntrinsicFunctions>true</IntrinsicFunctions>
      <SDLCheck>false</SDLCheck>
      <ConformanceMode>true</ConformanceMode>
      <AdditionalIncludeDirectories>$(SolutionDir)</AdditionalIncludeDirectories>
      <PreprocessorDefinitions>AnsiApi_EXPORT;_WINDLL;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <LanguageStandard>stdcpp17</LanguageStandard>
    </ClCompile>
    <Link>
      <EnableCOMDATFolding>true</EnableCOMDATFolding>
      <OptimizeReferences>true</OptimizeReferences>
    </Link>
    <PostBuildEvent>
      <Command>echo Libraries:
if NOT EXIST A:\Libraries\NUL ( mkdir A:\Libraries )
copy /Y "$(outdir)$(Targetname).lib" A:\Libraries
echo "dll subdirectory:"
if NOT EXIST A:\Dll\NUL ( mkdir A:\Dll )

echo "$(outdir)$(Targetname).dll A:\Dll:"
copy /Y "$(outdir)$(Targetname).dll" A:\Dll
echo "includes subdir specific to $(projectname):"
if NOT EXIST A:\include\$(TargetName)\NUL ( mkdir "A:\include\$(TargetName)" )
copy /Y "$(ProjectDir)"*.h "A:\include\$(TargetName)"


REM (example:) set SubDirs=(text lexer interpreter interpreter\lang interpreter\rt journal)

REM for %%D in %SubDirs% do (
REM   echo " Processing directory:$(projectdir)%%D:"
REM   if EXIST "$(ProjectDir)%%D" (
REM         echo %%D
REM        if NOT EXIST A:\include\$(TargetName)\%%D\NUL ( 
REM              echo " Create sub dir A:\include\$(TargetName)\%%D" 
REM              mkdir "A:\include\$(TargetName)\%%D" 
REM        )
REM       echo "copy /Y $(ProjectDir)%%D\*.h A:\include\$(TargetName)\%%D"
REM       copy /Y "$(ProjectDir)%%D\"*.h "A:\include\$(TargetName)\%%D"
REM )
REM )</Command>
    </PostBuildEvent>
  </ItemDefinitionGroup>
  <ItemGroup>
    <ClInclude Include="AnsiApi++.h" />
    <ClInclude Include="ccAnsi.h" />
  </ItemGroup>
  <ItemGroup>
    <ClCompile Include="ccAnsi.cpp" />
  </ItemGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
  <ImportGroup Label="ExtensionTargets">
  </ImportGroup>
</Project>